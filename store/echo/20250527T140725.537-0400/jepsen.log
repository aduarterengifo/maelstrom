2025-05-27 14:07:25,581{GMT}	INFO	[jepsen test runner] jepsen.core: Test version cbe507be58e790f9384be213814db7ad1665b3d9 (plus uncommitted changes)
2025-05-27 14:07:25,582{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin demo/ruby/echo.rb --time-limit 5
2025-05-27 14:07:25,617{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x354d5692"
         "maelstrom.db$db$reify__16612@354d5692"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x54fd5f6" "2025-05-27T14:07:25.537-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x219aab91"
         "maelstrom.net$jepsen_net$reify__15721@219aab91"]
 :client
 #object[maelstrom.workload.echo$client$reify__17402
         "0x71737478"
         "maelstrom.workload.echo$client$reify__17402@71737478"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x64001530"
         "java.util.concurrent.CyclicBarrier@64001530"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x1f9b8c23"
         "jepsen.checker$compose$reify__11089@1f9b8c23"]
 :argv ("test" "-w" "echo" "--bin" "demo/ruby/echo.rb" "--time-limit" "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@6b297a62"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@11303cb"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "demo/ruby/echo.rb"
 :generator
 #object[jepsen.util.Forgettable
         "0x2c9573f1"
         (jepsen.generator.TimeLimit
          {:limit 5000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x5634c26c"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5634c26c"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x37a5ac85"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@37a5ac85"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 400000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.EachThread
                                        {:fresh-gen #object[maelstrom.workload.echo$workload$fn__17421
                                                            "0x5d4f0fd5"
                                                            "maelstrom.workload.echo$workload$fn__17421@5d4f0fd5"],
                                         :context-filters #object[clojure.core$promise$reify__8621
                                                                  "0x2092b072"
                                                                  {:status :pending,
                                                                   :val nil}],
                                         :gens {}})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x504521ae"
         "maelstrom.net$jepsen_os$reify__15724@504521ae"]
 :time-limit 5
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-27 14:07:26,760{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-27 14:07:26,761{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-27 14:07:26,762{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n3] maelstrom.process: launching demo/ruby/echo.rb []
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n2] maelstrom.process: launching demo/ruby/echo.rb []
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n4] maelstrom.process: launching demo/ruby/echo.rb []
2025-05-27 14:07:26,763{GMT}	INFO	[jepsen node n5] maelstrom.process: launching demo/ruby/echo.rb []
2025-05-27 14:07:26,764{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-27 14:07:26,765{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-27 14:07:26,765{GMT}	INFO	[jepsen node n1] maelstrom.process: launching demo/ruby/echo.rb []
2025-05-27 14:07:26,887{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-27 14:07:26,896{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 13"
2025-05-27 14:07:26,899{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 13", :msg_id 2, :in_reply_to 1}
2025-05-27 14:07:27,237{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 96"
2025-05-27 14:07:27,245{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 96", :msg_id 2, :in_reply_to 1}
2025-05-27 14:07:27,479{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 24"
2025-05-27 14:07:27,482{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 24", :msg_id 2, :in_reply_to 1}
2025-05-27 14:07:27,735{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 62"
2025-05-27 14:07:27,736{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 62", :msg_id 3, :in_reply_to 2}
2025-05-27 14:07:28,076{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 113"
2025-05-27 14:07:28,078{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 113", :msg_id 3, :in_reply_to 2}
2025-05-27 14:07:28,279{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 124"
2025-05-27 14:07:28,282{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 124", :msg_id 4, :in_reply_to 3}
2025-05-27 14:07:28,414{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 64"
2025-05-27 14:07:28,416{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 64", :msg_id 4, :in_reply_to 3}
2025-05-27 14:07:28,766{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 75"
2025-05-27 14:07:28,769{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 75", :msg_id 5, :in_reply_to 4}
2025-05-27 14:07:28,964{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 28"
2025-05-27 14:07:28,969{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 28", :msg_id 2, :in_reply_to 1}
2025-05-27 14:07:29,076{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 112"
2025-05-27 14:07:29,078{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 112", :msg_id 3, :in_reply_to 2}
2025-05-27 14:07:29,278{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 122"
2025-05-27 14:07:29,282{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 122", :msg_id 2, :in_reply_to 1}
2025-05-27 14:07:29,341{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 36"
2025-05-27 14:07:29,343{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 36", :msg_id 3, :in_reply_to 2}
2025-05-27 14:07:29,386{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 65"
2025-05-27 14:07:29,389{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 65", :msg_id 6, :in_reply_to 5}
2025-05-27 14:07:29,444{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 13"
2025-05-27 14:07:29,446{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 13", :msg_id 7, :in_reply_to 6}
2025-05-27 14:07:29,810{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 47"
2025-05-27 14:07:29,812{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 47", :msg_id 4, :in_reply_to 3}
2025-05-27 14:07:30,078{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 102"
2025-05-27 14:07:30,081{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 102", :msg_id 5, :in_reply_to 4}
2025-05-27 14:07:30,130{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 10"
2025-05-27 14:07:30,132{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 10", :msg_id 6, :in_reply_to 5}
2025-05-27 14:07:30,398{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 68"
2025-05-27 14:07:30,401{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 68", :msg_id 3, :in_reply_to 2}
2025-05-27 14:07:30,629{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 102"
2025-05-27 14:07:30,632{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 102", :msg_id 7, :in_reply_to 6}
2025-05-27 14:07:30,801{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 2"
2025-05-27 14:07:30,804{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 2", :msg_id 8, :in_reply_to 7}
2025-05-27 14:07:30,918{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 89"
2025-05-27 14:07:30,919{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 89", :msg_id 5, :in_reply_to 4}
2025-05-27 14:07:31,189{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 21"
2025-05-27 14:07:31,191{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 21", :msg_id 6, :in_reply_to 5}
2025-05-27 14:07:31,341{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 72"
2025-05-27 14:07:31,343{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 72", :msg_id 4, :in_reply_to 3}
2025-05-27 14:07:31,345{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 98"
2025-05-27 14:07:31,346{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 98", :msg_id 9, :in_reply_to 8}
2025-05-27 14:07:31,464{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 95"
2025-05-27 14:07:31,467{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 95", :msg_id 7, :in_reply_to 6}
2025-05-27 14:07:31,551{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 116"
2025-05-27 14:07:31,553{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 116", :msg_id 8, :in_reply_to 7}
2025-05-27 14:07:31,774{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 63"
2025-05-27 14:07:31,777{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 63", :msg_id 4, :in_reply_to 3}
2025-05-27 14:07:31,820{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 117"
2025-05-27 14:07:31,822{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 117", :msg_id 8, :in_reply_to 7}
2025-05-27 14:07:31,835{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-05-27 14:07:31,862{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-27 14:07:31,862{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-27 14:07:31,862{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-27 14:07:31,862{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-27 14:07:31,862{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-27 14:07:32,828{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-27 14:07:32,831{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-05-27 14:07:39,559{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-05-27 14:07:39,565{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/adr/code/maelstrom/store/echo/20250527T140725.537-0400/results.edn
2025-05-27 14:07:39,598{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 28,
         :ok-count 28,
         :fail-count 0,
         :info-count 0,
         :by-f {:echo {:valid? true,
                       :count 28,
                       :ok-count 28,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 66,
             :recv-count 66,
             :msg-count 66,
             :msgs-per-op 2.357143},
       :clients {:send-count 66, :recv-count 66, :msg-count 66},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true, :errors ()},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
