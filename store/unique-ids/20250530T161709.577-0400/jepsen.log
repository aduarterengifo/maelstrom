2025-05-30 16:17:09,604{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 0e5019a1861d5fae32c5000f15976477045df591 (plus uncommitted changes)
2025-05-30 16:17:09,604{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w unique-ids --bin self/server/_build/default/bin/main.exe --time-limit 5
2025-05-30 16:17:09,631{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x21ad0060"
         "maelstrom.db$db$reify__16612@21ad0060"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "unique-ids"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x15a8b228" "2025-05-30T16:17:09.577-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x5a69f1ef"
         "maelstrom.net$jepsen_net$reify__15721@5a69f1ef"]
 :client
 #object[maelstrom.workload.unique_ids$client$reify__21401
         "0x54fd5f6"
         "maelstrom.workload.unique_ids$client$reify__21401@54fd5f6"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x219aab91"
         "java.util.concurrent.CyclicBarrier@219aab91"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x71737478"
         "jepsen.checker$compose$reify__11089@71737478"]
 :argv
 ("test"
  "-w"
  "unique-ids"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@64001530"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@1f9b8c23"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x178826db"
         (jepsen.generator.TimeLimit
          {:limit 5000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0xbec2d81"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@bec2d81"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x5f04449a"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5f04449a"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 400000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Repeat
                                        {:remaining -1, :gen {:f :generate}})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x5634c26c"
         "maelstrom.net$jepsen_os$reify__15724@5634c26c"]
 :time-limit 5
 :workload :unique-ids
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-30 16:17:10,766{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-30 16:17:10,766{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-30 16:17:10,767{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n3] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n2] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n5] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:17:10,768{GMT}	INFO	[jepsen node n4] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:17:10,769{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-30 16:17:10,770{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-30 16:17:10,771{GMT}	INFO	[jepsen node n1] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:17:20,599{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-30 16:17:20,632{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:generate	nil
2025-05-30 16:17:20,665{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:generate	nil
2025-05-30 16:17:21,036{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:generate	nil
2025-05-30 16:17:21,328{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:generate	nil
2025-05-30 16:17:21,492{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:generate	nil
2025-05-30 16:17:25,636{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:generate	nil	:net-timeout
2025-05-30 16:17:25,676{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:generate	nil	:net-timeout
2025-05-30 16:17:26,036{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:generate	nil	:net-timeout
2025-05-30 16:17:26,328{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:info	:generate	nil	:net-timeout
2025-05-30 16:17:26,491{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:info	:generate	nil	:net-timeout
2025-05-30 16:17:26,501{GMT}	WARN	[n5 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid source for message #maelstrom.net.message.Message{:id 152486, :src "c14", :dest "n5", :body {:type "generate", :msg_id 1}}
(get queues (:src m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:172)
	at maelstrom.net$validate_msg.invoke(net.clj:166)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:201)
	at maelstrom.net$send_BANG_.invoke(net.clj:189)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 16:17:26,501{GMT}	WARN	[n4 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid source for message #maelstrom.net.message.Message{:id 152490, :src "c13", :dest "n4", :body {:type "generate", :msg_id 1}}
(get queues (:src m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:172)
	at maelstrom.net$validate_msg.invoke(net.clj:166)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:201)
	at maelstrom.net$send_BANG_.invoke(net.clj:189)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 16:17:26,501{GMT}	WARN	[n3 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid source for message #maelstrom.net.message.Message{:id 152488, :src "c12", :dest "n3", :body {:type "generate", :msg_id 1}}
(get queues (:src m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:172)
	at maelstrom.net$validate_msg.invoke(net.clj:166)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:201)
	at maelstrom.net$send_BANG_.invoke(net.clj:189)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 16:17:26,501{GMT}	WARN	[n2 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid source for message #maelstrom.net.message.Message{:id 152487, :src "c11", :dest "n2", :body {:type "generate", :msg_id 1}}
(get queues (:src m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:172)
	at maelstrom.net$validate_msg.invoke(net.clj:166)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:201)
	at maelstrom.net$send_BANG_.invoke(net.clj:189)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 16:17:26,501{GMT}	WARN	[n1 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid source for message #maelstrom.net.message.Message{:id 152489, :src "c10", :dest "n1", :body {:type "generate", :msg_id 1}}
(get queues (:src m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:172)
	at maelstrom.net$validate_msg.invoke(net.clj:166)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:201)
	at maelstrom.net$send_BANG_.invoke(net.clj:189)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 16:17:26,503{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-05-30 16:17:26,524{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-30 16:17:26,524{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-30 16:17:26,524{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-30 16:17:26,524{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-30 16:17:26,524{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-30 16:17:27,833{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-30 16:17:27,840{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-05-30 16:17:28,172{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-05-30 16:17:28,180{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/adr/code/maelstrom/store/unique-ids/20250530T161709.577-0400/results.edn
2025-05-30 16:17:28,196{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 5,
         :ok-count 0,
         :fail-count 0,
         :info-count 5,
         :by-f {:generate {:valid? false,
                           :count 5,
                           :ok-count 0,
                           :fail-count 0,
                           :info-count 5}}},
 :availability {:valid? true, :ok-fraction 0.0},
 :net {:all {:send-count 152486,
             :recv-count 152486,
             :msg-count 152486,
             :msgs-per-op 30497.2},
       :clients {:send-count 152486,
                 :recv-count 152486,
                 :msg-count 152486},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true,
            :attempted-count 5,
            :acknowledged-count 0,
            :duplicated-count 0,
            :duplicated {},
            :range [nil nil]},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
