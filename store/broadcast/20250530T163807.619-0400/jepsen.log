2025-05-30 16:38:07,646{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 0e5019a1861d5fae32c5000f15976477045df591 (plus uncommitted changes)
2025-05-30 16:38:07,647{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin self/server/_build/default/bin/main.exe --time-limit 5
2025-05-30 16:38:07,688{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x54fd5f6"
         "maelstrom.db$db$reify__16612@54fd5f6"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x1f9b8c23" "2025-05-30T16:38:07.619-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x6b297a62"
         "maelstrom.net$jepsen_net$reify__15721@6b297a62"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x11303cb"
         "maelstrom.workload.broadcast$client$reify__17142@11303cb"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x655e3f4c"
         "java.util.concurrent.CyclicBarrier@655e3f4c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x26e74d50"
         "jepsen.checker$compose$reify__11089@26e74d50"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@6bdc984"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@1f299fc3"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x4b954cbb"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 5000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x504521ae"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@504521ae"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x4a9e6ea7"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@4a9e6ea7"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 400000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 0,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x5aaecd25"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5aaecd25"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x239fdf8f"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@239fdf8f"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x1acd660d"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x22f3b213"
         "maelstrom.net$jepsen_os$reify__15724@22f3b213"]
 :time-limit 5
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-30 16:38:08,839{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-30 16:38:08,840{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-30 16:38:08,841{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-30 16:38:08,841{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-30 16:38:08,841{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n3] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n4] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n2] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:38:08,842{GMT}	INFO	[jepsen node n5] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:38:08,843{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-30 16:38:08,844{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-30 16:38:08,844{GMT}	INFO	[jepsen node n1] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 16:38:18,644{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-30 16:38:23,663{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-30 16:38:23,663{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-30 16:38:23,663{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-30 16:38:23,663{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-30 16:38:23,663{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-30 16:38:24,935{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-30 16:38:24,939{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.broadcast$fn__17052$topology_BANG___17053.invoke(broadcast.clj:19)
	at maelstrom.workload.broadcast$fn__17052$topology_BANG___17053.invoke(broadcast.clj:19)
	at maelstrom.workload.broadcast$client$reify__17142.setup_BANG_(broadcast.clj:197)
	at jepsen.core$run_case_BANG_$fn__13862.invoke(core.clj:212)
	at dom_top.core$real_pmap_helper$build_thread__730$fn__731.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:428)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:135)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:400)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1583)
