2025-05-30 18:59:28,697{GMT}	INFO	[jepsen test runner] jepsen.core: Test version ea0057d853abcf9279a40b55bdf6784a212b6b9f (plus uncommitted changes)
2025-05-30 18:59:28,698{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin self/server/_build/default/bin/main.exe --time-limit 5
2025-05-30 18:59:28,730{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x54fd5f6"
         "maelstrom.db$db$reify__16612@54fd5f6"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x1f9b8c23" "2025-05-30T18:59:28.672-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x6b297a62"
         "maelstrom.net$jepsen_net$reify__15721@6b297a62"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x11303cb"
         "maelstrom.workload.broadcast$client$reify__17142@11303cb"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x655e3f4c"
         "java.util.concurrent.CyclicBarrier@655e3f4c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x26e74d50"
         "jepsen.checker$compose$reify__11089@26e74d50"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@6bdc984"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@1f299fc3"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x4b954cbb"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 5000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x504521ae"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@504521ae"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x4a9e6ea7"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@4a9e6ea7"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 400000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x5aaecd25"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5aaecd25"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x239fdf8f"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@239fdf8f"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x1acd660d"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x22f3b213"
         "maelstrom.net$jepsen_os$reify__15724@22f3b213"]
 :time-limit 5
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-30 18:59:29,546{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-30 18:59:29,546{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n3] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n2] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n4] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:59:29,547{GMT}	INFO	[jepsen node n5] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:59:29,548{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-30 18:59:29,548{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-30 18:59:29,548{GMT}	INFO	[jepsen node n1] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:59:38,381{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-30 18:59:38,410{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-05-30 18:59:38,412{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-05-30 18:59:38,680{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	0
2025-05-30 18:59:38,683{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:broadcast	0
2025-05-30 18:59:38,696{GMT}	WARN	[n2 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n2 tried to send the following message via STDOUT:

{:id nil,
 :src "n2",
 :dest "n5",
 :body {:type "broadcast", :message "0", :msg_id 2}}

This is malformed because:

{:id (not (integer? nil))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 18:59:38,810{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:38,812{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:59:38,900{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:broadcast	1
2025-05-30 18:59:38,901{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:broadcast	1
2025-05-30 18:59:38,903{GMT}	WARN	[n4 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n4 tried to send the following message via STDOUT:

{:id nil,
 :src "n4",
 :dest "n1",
 :body {:type "broadcast", :message "1", :msg_id 2}}

This is malformed because:

{:id (not (integer? nil))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 18:59:38,905{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:broadcast	2
2025-05-30 18:59:38,906{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:broadcast	2
2025-05-30 18:59:38,909{GMT}	WARN	[n5 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n5 tried to send the following message via STDOUT:

{:id nil,
 :src "n5",
 :dest "n2",
 :body {:type "broadcast", :message "2", :msg_id 2}}

This is malformed because:

{:id (not (integer? nil))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 18:59:39,286{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-05-30 18:59:39,287{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-05-30 18:59:39,635{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	3
2025-05-30 18:59:39,636{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:broadcast	3
2025-05-30 18:59:39,638{GMT}	WARN	[n1 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n1 tried to send the following message via STDOUT:

{:id nil,
 :src "n1",
 :dest "n4",
 :body {:type "broadcast", :message "3", :msg_id 4}}

This is malformed because:

{:id (not (integer? nil))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 18:59:39,996{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	4
2025-05-30 18:59:40,248{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:40,250{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:59:40,460{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:read	nil
2025-05-30 18:59:40,828{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2025-05-30 18:59:41,053{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-05-30 18:59:41,405{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:41,406{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:59:41,725{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:41,727{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:59:41,974{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:41,975{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:59:42,223{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:broadcast	5
2025-05-30 18:59:42,224{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:broadcast	5
2025-05-30 18:59:42,226{GMT}	WARN	[n3 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n3 tried to send the following message via STDOUT:

{:id nil,
 :src "n3",
 :dest "n2",
 :body {:type "broadcast", :message "5", :msg_id 7}}

This is malformed because:

{:id (not (integer? nil))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-05-30 18:59:42,488{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:45,001{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:broadcast	4	:net-timeout
2025-05-30 18:59:45,464{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:fail	:read	nil	:net-timeout
2025-05-30 18:59:45,828{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:fail	:read	nil	:net-timeout
2025-05-30 18:59:46,058{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	nil	:net-timeout
2025-05-30 18:59:47,492{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:fail	:read	nil	:net-timeout
2025-05-30 18:59:47,493{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2025-05-30 18:59:57,501{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-05-30 18:59:57,501{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:invoke	:read	nil
2025-05-30 18:59:57,501{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:read	nil
2025-05-30 18:59:57,501{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:59:57,501{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2025-05-30 19:00:02,501{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:fail	:read	nil	:net-timeout
2025-05-30 19:00:02,501{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	nil	:net-timeout
2025-05-30 19:00:02,503{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:fail	:read	nil	:net-timeout
2025-05-30 19:00:02,506{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:fail	:read	nil	:net-timeout
2025-05-30 19:00:02,506{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:fail	:read	nil	:net-timeout
2025-05-30 19:00:02,517{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-05-30 19:00:02,556{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-30 19:00:02,556{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-30 19:00:02,556{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-30 19:00:02,556{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-30 19:00:02,556{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-30 19:00:03,666{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-30 19:00:03,668{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-05-30 19:00:03,805{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-05-30 19:00:03,813{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/adr/code/maelstrom/store/broadcast/20250530T185928.672-0400/results.edn
2025-05-30 19:00:03,833{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 22,
         :ok-count 12,
         :fail-count 9,
         :info-count 1,
         :by-f {:broadcast {:valid? true,
                            :count 6,
                            :ok-count 5,
                            :fail-count 0,
                            :info-count 1},
                :read {:valid? true,
                       :count 16,
                       :ok-count 7,
                       :fail-count 9,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 0.54545456},
 :net {:all {:send-count 54,
             :recv-count 54,
             :msg-count 54,
             :msgs-per-op 2.4545455},
       :clients {:send-count 54, :recv-count 54, :msg-count 54},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:worst-stale (),
            :duplicated-count 0,
            :valid? false,
            :lost-count 4,
            :lost (0 1 2 3),
            :stable-count 0,
            :stale-count 0,
            :stale (),
            :never-read-count 2,
            :attempt-count 6,
            :lost-latencies {0 0, 0.5 0, 0.95 0, 0.99 0, 1 0},
            :never-read (4 5),
            :duplicated {}},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
