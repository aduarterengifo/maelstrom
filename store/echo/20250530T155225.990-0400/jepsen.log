2025-05-30 15:52:26,016{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 0e5019a1861d5fae32c5000f15976477045df591 (plus uncommitted changes)
2025-05-30 15:52:26,016{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin self/server/_build/default/bin/main.exe --time-limit 5
2025-05-30 15:52:26,044{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x354d5692"
         "maelstrom.db$db$reify__16612@354d5692"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x54fd5f6" "2025-05-30T15:52:25.990-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x219aab91"
         "maelstrom.net$jepsen_net$reify__15721@219aab91"]
 :client
 #object[maelstrom.workload.echo$client$reify__17402
         "0x71737478"
         "maelstrom.workload.echo$client$reify__17402@71737478"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x64001530"
         "java.util.concurrent.CyclicBarrier@64001530"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x1f9b8c23"
         "jepsen.checker$compose$reify__11089@1f9b8c23"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@6b297a62"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@11303cb"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x2c9573f1"
         (jepsen.generator.TimeLimit
          {:limit 5000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x5634c26c"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5634c26c"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x37a5ac85"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@37a5ac85"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 400000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.EachThread
                                        {:fresh-gen #object[maelstrom.workload.echo$workload$fn__17421
                                                            "0x5d4f0fd5"
                                                            "maelstrom.workload.echo$workload$fn__17421@5d4f0fd5"],
                                         :context-filters #object[clojure.core$promise$reify__8621
                                                                  "0x2092b072"
                                                                  {:status :pending,
                                                                   :val nil}],
                                         :gens {}})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x504521ae"
         "maelstrom.net$jepsen_os$reify__15724@504521ae"]
 :time-limit 5
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-30 15:52:27,203{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-30 15:52:27,204{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-30 15:52:27,205{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-30 15:52:27,205{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-30 15:52:27,205{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n2] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n3] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n5] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 15:52:27,206{GMT}	INFO	[jepsen node n4] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 15:52:27,207{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-30 15:52:27,208{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-30 15:52:27,208{GMT}	INFO	[jepsen node n1] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 15:52:36,989{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-30 15:52:37,002{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 61"
2025-05-30 15:52:37,006{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 61", :msg_id 1, :in_reply_to 1}
2025-05-30 15:52:37,272{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 36"
2025-05-30 15:52:37,275{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 36", :msg_id 1, :in_reply_to 1}
2025-05-30 15:52:37,600{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 80"
2025-05-30 15:52:37,602{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 80", :msg_id 1, :in_reply_to 1}
2025-05-30 15:52:37,955{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 10"
2025-05-30 15:52:38,233{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 73"
2025-05-30 15:52:38,471{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 117"
2025-05-30 15:52:38,473{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 117", :msg_id 1, :in_reply_to 1}
2025-05-30 15:52:38,531{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 116"
2025-05-30 15:52:38,857{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 37"
2025-05-30 15:52:39,066{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 56"
2025-05-30 15:52:39,069{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 56", :msg_id 1, :in_reply_to 1}
2025-05-30 15:52:39,170{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 15"
2025-05-30 15:52:42,970{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:echo	"Please echo 10"	:net-timeout
2025-05-30 15:52:43,238{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:info	:echo	"Please echo 73"	:net-timeout
2025-05-30 15:52:43,536{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:echo	"Please echo 116"	:net-timeout
2025-05-30 15:52:43,865{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:info	:echo	"Please echo 37"	:net-timeout
2025-05-30 15:52:44,188{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:echo	"Please echo 15"	:net-timeout
2025-05-30 15:52:44,205{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-05-30 15:52:44,253{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-30 15:52:44,254{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-30 15:52:44,254{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-30 15:52:44,254{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-30 15:52:44,254{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-30 15:52:44,561{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-30 15:52:44,568{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n1 crashed with exit status 0. Before crashing, it wrote to STDOUT:

{"src":"n1","dest":"c3","body":{"type":"init_ok","in_reply_to":1,"msg_id":0}}
{"src":"n1","dest":"c11","body":{"type":"echo_ok","echo":"Please echo 36","msg_id":1,"in_reply_to":1}}

And to STDERR:

[INFO] Entering main loop
[RECEIVED] {"id":3,"src":"c3","dest":"n1","body":{"type":"init","node_id":"n1","node_ids":["n1","n2","n3","n4","n5"],"msg_id":1}}
DEBUG: request_body_of_yojson got: {"type":"init","node_id":"n1","node_ids":["n1","n2","n3","n4","n5"],"msg_id":1}
Initialized node n1
Init send {"src":"n1","dest":"c3","body":{"type":"init_ok","in_reply_to":1,"msg_id":0}}
[RECEIVED] {"id":12,"src":"c11","dest":"n1","body":{"echo":"Please echo 36","type":"echo","msg_id":1}}
DEBUG: request_body_of_yojson got: {"echo":"Please echo 36","type":"echo","msg_id":1}
Echoing {"src":"n1","dest":"c11","body":{"type":"echo_ok","echo":"Please echo 36","msg_id":1,"in_reply_to":1}}

Full STDERR logs are available in /Users/adr/code/maelstrom/store/echo/20250530T155225.990-0400/node-logs/n1.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16612.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__11629$G__11610__11633.invoke(db.clj:12)
	at jepsen.db$fn__11629$G__11609__11638.invoke(db.clj:12)
	at clojure.core$partial$fn__5927.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__9552.invoke(control.clj:319)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:145)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:411)
	at dom_top.core$real_pmap_helper$build_thread__730$fn__731.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:428)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:135)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:400)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1583)
