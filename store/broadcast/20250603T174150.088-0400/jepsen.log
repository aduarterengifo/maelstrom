2025-06-03 17:41:50,124{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 249d74bef2356d0e76fd1279b3e2446866958ea9 (plus uncommitted changes)
2025-06-03 17:41:50,125{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --node-count 1 --bin self/server/_build/default/bin/main.exe --time-limit 20 --rate 10
2025-06-03 17:41:50,166{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16612
         "0x15a8b228"
         "maelstrom.db$db$reify__16612@15a8b228"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x71737478" "2025-06-03T17:41:50.088-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x64001530"
         "maelstrom.net$jepsen_net$reify__15721@64001530"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x1f9b8c23"
         "maelstrom.workload.broadcast$client$reify__17142@1f9b8c23"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x6b297a62"
         "java.util.concurrent.CyclicBarrier@6b297a62"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x11303cb"
         "jepsen.checker$compose$reify__11089@11303cb"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--node-count"
  "1"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@655e3f4c"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@26e74d50"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x3a1dc432"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 20000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x5d4f0fd5"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5d4f0fd5"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x2092b072"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@2092b072"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 200000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x4a9e6ea7"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@4a9e6ea7"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x6f8af186"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6f8af186"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x5aaecd25"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x239fdf8f"
         "maelstrom.net$jepsen_os$reify__15724@239fdf8f"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-06-03 17:41:51,268{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-06-03 17:41:51,268{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-06-03 17:41:51,269{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-06-03 17:41:51,270{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-06-03 17:41:51,271{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-06-03 17:41:51,271{GMT}	INFO	[jepsen node n0] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-06-03 17:41:59,424{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-06-03 17:41:59,437{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-06-03 17:41:59,438{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-06-03 17:41:59,502{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-06-03 17:41:59,503{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-06-03 17:41:59,517{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2025-06-03 17:42:04,518{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	0	:net-timeout
2025-06-03 17:42:04,519{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2025-06-03 17:42:09,524{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:fail	:read	nil	:net-timeout
2025-06-03 17:42:09,524{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:broadcast	1
2025-06-03 17:42:14,526{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:info	:broadcast	1	:net-timeout
2025-06-03 17:42:14,526{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:read	nil
2025-06-03 17:42:19,531{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:fail	:read	nil	:net-timeout
2025-06-03 17:42:19,532{GMT}	INFO	[jepsen worker 0] jepsen.generator.interpreter: Waiting for recovery...
2025-06-03 17:42:29,540{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:read	nil
2025-06-03 17:42:34,541{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:fail	:read	nil	:net-timeout
2025-06-03 17:42:34,558{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-06-03 17:42:34,622{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-06-03 17:42:36,440{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-06-03 17:42:36,441{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-06-03 17:42:36,590{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-06-03 17:42:36,598{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/adr/code/maelstrom/store/broadcast/20250603T174150.088-0400/results.edn
2025-06-03 17:42:36,614{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 7,
         :ok-count 2,
         :fail-count 3,
         :info-count 2,
         :by-f {:broadcast {:valid? false,
                            :count 2,
                            :ok-count 0,
                            :fail-count 0,
                            :info-count 2},
                :read {:valid? true,
                       :count 5,
                       :ok-count 2,
                       :fail-count 3,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 0.2857143},
 :net {:all {:send-count 13,
             :recv-count 13,
             :msg-count 13,
             :msgs-per-op 1.8571428},
       :clients {:send-count 13, :recv-count 13, :msg-count 13},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:worst-stale (),
            :duplicated-count 0,
            :valid? :unknown,
            :lost-count 0,
            :lost (),
            :stable-count 0,
            :stale-count 0,
            :stale (),
            :never-read-count 2,
            :attempt-count 2,
            :never-read (0 1),
            :duplicated {}},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
