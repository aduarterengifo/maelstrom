2025-05-30 18:00:21,184{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 58295c6a46b45ce52d65922d34eae79e43e0bca3 (plus uncommitted changes)
2025-05-30 18:00:21,184{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin self/server/_build/default/bin/main.exe --time-limit 5
2025-05-30 18:00:21,227{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x54fd5f6"
         "maelstrom.db$db$reify__16612@54fd5f6"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x1f9b8c23" "2025-05-30T18:00:21.153-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x6b297a62"
         "maelstrom.net$jepsen_net$reify__15721@6b297a62"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x11303cb"
         "maelstrom.workload.broadcast$client$reify__17142@11303cb"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x655e3f4c"
         "java.util.concurrent.CyclicBarrier@655e3f4c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x26e74d50"
         "jepsen.checker$compose$reify__11089@26e74d50"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "self/server/_build/default/bin/main.exe"
  "--time-limit"
  "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@6bdc984"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@1f299fc3"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "self/server/_build/default/bin/main.exe"
 :generator
 #object[jepsen.util.Forgettable
         "0x4b954cbb"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 5000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x504521ae"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@504521ae"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x4a9e6ea7"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@4a9e6ea7"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 400000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x5aaecd25"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@5aaecd25"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x239fdf8f"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@239fdf8f"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x1acd660d"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x22f3b213"
         "maelstrom.net$jepsen_os$reify__15724@22f3b213"]
 :time-limit 5
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-05-30 18:00:22,338{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-05-30 18:00:22,338{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-05-30 18:00:22,339{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n5] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n4] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n3] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:00:22,340{GMT}	INFO	[jepsen node n2] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:00:22,341{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-05-30 18:00:22,342{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-05-30 18:00:22,342{GMT}	INFO	[jepsen node n1] maelstrom.process: launching self/server/_build/default/bin/main.exe []
2025-05-30 18:00:32,213{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-05-30 18:00:32,229{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-05-30 18:00:32,231{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-05-30 18:00:32,328{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	0
2025-05-30 18:00:32,423{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:00:32,426{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:00:32,573{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:read	nil
2025-05-30 18:00:32,575{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:read	[]
2025-05-30 18:00:32,630{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2025-05-30 18:00:32,633{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:read	[]
2025-05-30 18:00:32,768{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	1
2025-05-30 18:00:32,868{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:00:32,870{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:00:32,889{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:00:32,890{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:00:33,047{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-05-30 18:00:33,048{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[]
2025-05-30 18:00:33,357{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:broadcast	2
2025-05-30 18:00:33,456{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:broadcast	3
2025-05-30 18:00:33,754{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:broadcast	4
2025-05-30 18:00:37,335{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:broadcast	0	:net-timeout
2025-05-30 18:00:37,770{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	1	:net-timeout
2025-05-30 18:00:38,357{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:info	:broadcast	2	:net-timeout
2025-05-30 18:00:38,459{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:info	:broadcast	3	:net-timeout
2025-05-30 18:00:38,759{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:broadcast	4	:net-timeout
2025-05-30 18:00:38,760{GMT}	INFO	[jepsen worker 0] jepsen.generator.interpreter: Waiting for recovery...
2025-05-30 18:00:48,768{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:invoke	:read	nil
2025-05-30 18:00:48,768{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:invoke	:read	nil
2025-05-30 18:00:48,770{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:invoke	:read	nil
2025-05-30 18:00:48,768{GMT}	INFO	[jepsen worker 3] jepsen.util: 8	:invoke	:read	nil
2025-05-30 18:00:48,770{GMT}	INFO	[jepsen worker 2] jepsen.util: 7	:invoke	:read	nil
2025-05-30 18:00:53,771{GMT}	INFO	[jepsen worker 3] jepsen.util: 8	:fail	:read	nil	:net-timeout
2025-05-30 18:00:53,771{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:fail	:read	nil	:net-timeout
2025-05-30 18:00:53,771{GMT}	INFO	[jepsen worker 2] jepsen.util: 7	:fail	:read	nil	:net-timeout
2025-05-30 18:00:53,772{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:fail	:read	nil	:net-timeout
2025-05-30 18:00:53,774{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:fail	:read	nil	:net-timeout
2025-05-30 18:00:53,795{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-05-30 18:00:53,838{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-05-30 18:00:53,838{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-05-30 18:00:53,838{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-05-30 18:00:53,838{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-05-30 18:00:53,838{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-05-30 18:00:54,790{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-05-30 18:00:54,792{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n5 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n5","dest":"c3","body":{"type":"init_ok","in_reply_to":1,"msg_id":0}}
{"src":"n5","dest":"c9","body":{"type":"topology_ok","in_reply_to":1,"msg_id":1}}
{"src":"n5","dest":"c14","body":{"type":"read_ok","messages":[],"in_reply_to":1,"msg_id":2}}

And to STDERR:

[INFO] Entering main loop
[RECEIVED] {"id":3,"src":"c3","dest":"n5","body":{"type":"init","node_id":"n5","node_ids":["n1","n2","n3","n4","n5"],"msg_id":1}}
[MATCH] InitBody
Initialized node n5
Init send {"src":"n5","dest":"c3","body":{"type":"init_ok","in_reply_to":1,"msg_id":0}}
[RECEIVED] {"id":14,"src":"c9","dest":"n5","body":{"type":"topology","topology":{"n1":["n4","n2"],"n2":["n5","n3","n1"],"n3":["n2"],"n4":["n1","n5"],"n5":["n2","n4"]},"msg_id":1}}
[MATCH] TopologyBody
[TOPOLOGY RESPONSE] {"src":"n5","dest":"c9","body":{"type":"topology_ok","in_reply_to":1,"msg_id":1}}
[RECEIVED] {"id":27,"src":"c14","dest":"n5","body":{"type":"read","msg_id":1}}
[MATCH] ReadBody
[READ RESPONSE] {"src":"n5","dest":"c14","body":{"type":"read_ok","messages":[],"in_reply_to":1,"msg_id":2}}
[RECEIVED] {"id":37,"src":"c14","dest":"n5","body":{"type":"broadcast","message":3,"msg_id":2}}
Fatal error: exception Yojson__Safe.Util.Type_error("Expected string, got int", _)
Raised at Yojson__Safe.Util.typerr in file "lib/read.ml", line 3392, characters 20-60
Called from Dune__exe__Main.request_body_of_yojson in file "bin/main.ml", line 97, characters 20-57
Called from Dune__exe__Main.request_of_yojson.(fun).iter in file "bin/main.ml", line 272, characters 2-6
Called from Dune__exe__Main.request_of_yojson.(fun) in file "bin/main.ml", lines 268-273, characters 0-21
Called from Dune__exe__Main.main.loop in file "bin/main.ml", line 320, characters 18-44
Called from Eio_posix__Sched.with_op in file "lib_eio_posix/sched.ml", line 318, characters 8-12
Re-raised at Eio_posix__Sched.with_op in file "lib_eio_posix/sched.ml", line 324, characters 4-12
Called from Eio_posix__Sched.run.(fun) in file "lib_eio_posix/sched.ml", line 386, characters 29-47
Called from Eio_unix__Thread_pool.run in file "lib_eio/unix/thread_pool.ml", line 108, characters 8-13
Re-raised at Eio_unix__Thread_pool.run in file "lib_eio/unix/thread_pool.ml", line 113, characters 4-39
Re-raised at Eio_posix__Sched.run.fork.(fun) in file "lib_eio_posix/sched.ml", line 342, characters 12-76
Called from Stdlib__Fun.protect in file "fun.ml", line 34, characters 8-15
Re-raised at Stdlib__Fun.protect in file "fun.ml", line 39, characters 6-52
Called from Eio_posix__Sched.run in file "lib_eio_posix/sched.ml", lines 381-388, characters 4-9
Called from Eio_posix__Sched.with_sched in file "lib_eio_posix/sched.ml", line 258, characters 8-12
Re-raised at Eio_posix__Sched.with_sched in file "lib_eio_posix/sched.ml", line 263, characters 4-39
Called from Dune__exe__Main in file "bin/main.ml", lines 447-451, characters 2-37

Full STDERR logs are available in /Users/adr/code/maelstrom/store/broadcast/20250530T180021.153-0400/node-logs/n5.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16612.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__11629$G__11610__11633.invoke(db.clj:12)
	at jepsen.db$fn__11629$G__11609__11638.invoke(db.clj:12)
	at clojure.core$partial$fn__5927.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__9552.invoke(control.clj:319)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:145)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:411)
	at dom_top.core$real_pmap_helper$build_thread__730$fn__731.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:428)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:135)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:400)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1583)
